services:
  bot:
    build:
      context: ./bot
    container_name: chainflow-bot
    env_file:
      - ./bot/.env
    ports:
      - "8081:8081"
    networks:
        - app

  engine:
    build:
      context: ./engine
    container_name: chainflow-engine
    environment:
      INSCRIPTIONS_HISTORY_ENABLED: 'false'
      RABBITMQ_ENABLED: 'false'
    ports:
      - "8080:8080"
    networks:
      - app

  external-workers:
    build:
      context: ./external_workers
      dockerfile: Dockerfile.local
    container_name: chainflow-external-workers
    environment:
      - WORKER_SCRIPTS=messaging/telegram_message_worker.py,testnet_arbitrage/get_last_price.py  # Add more worker scripts as needed
      - CAMUNDA_URL=http://engine:8080/engine-rest
      - CAMUNDA_USER=demo
      - CAMUNDA_PASSWORD=demo
    networks:
      - app
    volumes:
      - ./external_workers/envs:/app/envs  # Mount the directory containing environment files
    depends_on:
      - engine

  flow-api:
    build:
      context: ./flow_api
    container_name: chainflow-flow-api
    env_file:
      - ./flow_api/.env
    ports:
      - "8000:8000"
    networks:
      - app
    depends_on:
      - postgres
      - pgbouncer
      - redis

  frontend:
    build:
      context: ./frontend
    env_file:
      - .env
    container_name: chainflow-frontend
    ports:
      - "3000:3000"
    networks:
      - app

  postgres:
    image: postgres:14-alpine
    container_name: postgres
    restart: always
    env_file:
      - ./flow_api/.env
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
      - PGDATA='/var/lib/postgresql/data/pgdata'
    networks:
      - app
    volumes:
      - ./postgres-data:/var/lib/postgresql/data

  pgbouncer:
    image: edoburu/pgbouncer
    container_name: pgbouncer
    restart: always
    env_file:
      - ./flow_api/.env
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASS}
      - DB_HOST=postgres
      - POOL_MODE=session
      - MAX_DB_CONNECTIONS=0
      - DEFAULT_POOL_SIZE=40
      - ADMIN_USERS=postgres,${DB_USER}
      - AUTH_TYPE=scram-sha-256
    ports:
      - ${DB_PORT}:${DB_PORT}
    depends_on:
      - postgres
    networks:
      - app

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    env_file:
      - ./flow_api/.env
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    networks:
      - app

networks:
  app:
    driver: bridge